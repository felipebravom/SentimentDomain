paste(1:10,sep=",")
paste(1:12)
paste("a",1:12)
cuatro_mult[1] #primer elemento
cuatro_mult[c(1,5)] # primer y quinto elemento
edades<18
edades[menores]
menores<-edades<18
edades[menores]
mean(menores[menores>=18])
menores>=18
mean(edades[edades>=18])
?factor
factor(edades<18)
levels(factor(edades<18))
assign("tres",3)
tres
factor(x=edades<18,levels=c("menor","mayor"))
edades<18
mayoria<-factor(x=edades<18)
mayoria
levels(mayoria)
mayoria<-factor(x=edades>18)
c("menor","mayor")->levels(mayoria)
matoria
mayoria
data.frame(edad=edades,mayoria=mayoria)
plot(data.frame(edad=edades,mayoria=mayoria))
boxplot(data.frame(edad=edades,mayoria=mayoria))
plot(edades~mayoria)
boxplot(edades~mayoria)
boxplot(edades~mayoria)
plot(edades~mayoria)
source('~/Dropbox/Data Mining Scripts/introR.R', echo=TRUE)
mayoria_edad
mayoria_edad<-factor(x=edades>18)
c("menor","mayor")->levels(mayoria_edad)
edad_mayor<-data.frame(edad=edad,adultez=mayoria_edad)
edad_mayor<-data.frame(edad=edades,adultez=mayoria_edad)
edad_mayor
summary(edades)
summary(edad.mayor)
summary(edad_mayor)
lm(adultez~edad,data=edd_mayor)
lm(adultez~edad,data=edad_mayor)
glm(formula=adultez~edad,data=edad_mayor,family="binomial")
glm(formula=adultez~edad,data=edad_mayor,family="binomial",link="logistic")
glm(formula=adultez~edad,data=edad_mayor,family="binomial",link="logit")
?glm
library(MASS)
lda(adultez~edad,data=edad_mayor)
plot(lda(adultez~edad,data=edad_mayor))
c("hola",2,T)
c(TRUE,FALSE,500)
cuatro_mult<-seq(from=4,by=4,length=100)
cuatro_mult
menores!=8
menores!=19
menores!=22
menores!=1:100
menores!=(1:100)
menores!=78
0/0
Na
NA
c(NA,NaN)
mean(c(NA,NaN))
attr(edades)
attr(edade)
attr(edades)
attr(edad)
attr(edad_maor)
names(edad_mayor)
edad_mayor[1]
edad_mayor[2]
edad_mayor[2][1]
edad_mayor$edad
edad_mayor$edad[2]
data()
data(USAArrests)
data(USArrests)
View(USArrests)
plot(USArrests)
cor(USArrests)
?data
data(package="rpart")
missing_vector<-c(12,15,NA)
is.na(missing_vector)
na.omit(missing_vector)
na.exclude(missing_vector)
?na.exclude
na.omir(missing_vector)
na.omit(missing_vector)
la<-na.omit(missing_vector)
la
la[1]
names(la)
attr(la)
?attr
is.na(missing_vector)
missing_vector[!is.na(missing_vector)]
cat("hola")
paste("persona",1:15)
paste("persona",1:15, sep="")
letters
paste(c("persona","animal"),1:15, sep="")
tapply(edades,mayoria_edad,mean)
?tapply
?rep
rep(c("hola","chao"),3)
rep(c("hola","chao"),1:3)
rep(c("hola","chao"),1:2)
rep(c("hola","chao"),15)
notas<-c(Juan=4.5,Luchito=6.2,El_profe=3.9)
notas
attr(notas)
dim(notas)
length(notas)
names(notas)
sort(notas)
names(sort(notas))
names(sort(x=notas,decreasing=T))
names(sort(x=notas,decreasing=F))
notas<-c(Juan=4.5,Luchito=6.2,El_profe=3.9,chancho=2.8,mariana=6.7)
names(notas)
# El ranking de los alumnos
names(sort(x=notas,decreasing=F))
matrix(data=1:12,nrow=3,ncol=4)
list(normal1=rnorm(n=100,mean=10,sd=5))
list(normal1=rnorm(n=100,mean=10,sd=5),normal2=rnorm(n=100,mean=0,sd=1),normal3=rnorm(n=100,mean=-10,sd=100)
)
list(normal1=rnorm(n=100,mean=10,sd=5),normal2=rnorm(n=100,mean=0,sd=1),normal3=rnorm(n=100,mean=-10,sd=100))
normales<-list(normal1=rnorm(n=100,mean=10,sd=5),
normal2=rnorm(n=100,mean=0,sd=1),normal3=rnorm(n=100,mean=-10,sd=100))
normales
summary(normales)
lapply(normales,mean)
sapply(normales,mean)
lapply(normales,mean)
lapply(normales,sd)
?sapply
edit(edad_mayor)
View(edad_mayor)
View(edad_mayor)
View(edad_mayor)
View(USArrests)
fix(b)
fix(d)
fix(unoadiez)
runif(12,min=1,max,100)
runif(12,min=1,max=100)
matrix_por_fil<-matrix(data=1:12,nrow=3,ncol=4,byrow=T)
matrix_por_fil
rownames(matrix_por_fil)
letters[1:3]->rownames(matrix_por_fil)
matrix_por_fill
matrix_por_fil
names(matrix_por_fil)
rownames(matrix_por_fil)
attributes(matrix_por_fil)
dim(matrix_por_fil)
?matrix
matrix_por_col[1,:]
matrix_por_col[1,]
matrix_por_fil[1,]
matrix_por_fil[,]
matrix_por_fil[2,]
matrix_por_fil[2,1]
matrix_por_fil[-1,-2]
matrix_por_fil
matrix_por_fil["a"]
matrix_por_fil["a",1]
matrix_por_fil["g",1]
matrix_por_fil["a",1]
matrix_por_fil["a",]
source('~/Dropbox/Data Mining Scripts/data.R', echo=TRUE)
#ruido
#ruido
x<-1:200
coseno<-2*cos(seq(from=0,by=pi/20,length=200))
plot(x,coseno,type="l")
coseno_ruid<-coseno+rnorm(200,sd=0.5)
plot(x,coseno_ruid,type="l")
coseno_ruid<-coseno+rnorm(200,sd=0.5)
plot(x,coseno_ruid,type="l")
# Muestreo
data(anorexia)
boxplot(anorexia$Prewt,sample(anorexia$Prewt,size=10,replace=T))
#Distancia entre datos
library("stats")
library("MASS")
m<-dist(x=anorexia[2,3],method="euclidean")
#Calcular la distancia de Jaccard
library("prabclus")
data(kykladspecreg)
jaccard(t(kykladspecreg))
install.packages("discretization")
library("discretization")
data(iris)
library("discretization")
mdlp(iris)$Disc.data
coseno_ruid
plot(coseno_ruid)
plot(coseno_ruid,type="l")
install.packages("signal")
library("signal")
?filter
filter(coseno_ruid,x)
x<-1:200
coseno<-2*cos(seq(from=0,by=pi/20,length=200))
plot(x,coseno,type="l")
coseno_ruid<-coseno+rnorm(200,sd=0.5)
plot(x,coseno_ruid,type="l")
coseno_ruid<-coseno+rnorm(200,sd=0.5)
plot(x,coseno_ruid,type="l")
filter(coseno_ruid,x)
x
??pca
data(USArrests)
## the variances of the variables in the
## USArrests data vary by orders of magnitude, so scaling is appropriate
prcomp(USArrests)  # inappropriate
prcomp(USArrests, scale = TRUE)
prcomp(~ Murder + Assault + Rape, data = USArrests, scale = TRUE)
plot(prcomp(USArrests))
summary(prcomp(USArrests, scale = TRUE))
biplot(prcomp(USArrests, scale = TRUE))
prcomp
?prcomp
View(USArrests)
biplot(prcomp(USArrests, scale = TRUE))
plot(comps)
comps<-prcomp(USArrests, scale = TRUE)
plot(comps)
?biplot
summary(comps)
comps$x
USArrests
comps$x
comps$x[,1:2]
plot(comps$x[,1:2])
biplot(comps$x[,1:2])
plot(comps$x[,1:2],data=comps)
plot(comps$x[,1:2],data=comps$x)
biplot(comps)
comps<-prcomp(USArrests, scale = TRUE)
summary(comps)
biplot(prcomp(USArrests, scale = TRUE))
library("nnet")
library("rpart")
library("rpart.plot")
library("class")
library("e1071")
library("xtable")
library("RWeka")
library("FSelector")
load("~/Dropbox/thesis_exp/workspace.R")
bay_neu_full_perf_san
bay_neu_cons_perf_san
bay_neu_cons_perf_ts
bay_neu_cfs_perf_san
j48_neu_full_perf_san
svm_neu_full_san <- tune(method=svm, neutral_label~.,
data = neu_data_san,ranges = list(gamma = 2^(-7:3),
cost = 2^(-3:5)),
tunecontrol = tune.control(sampling = "cross"),cross=10)
svm_neu_cfs_san <- tune(method=svm, neutral_label~.,
data = neu_data_cfs_san,ranges = list(gamma = 2^(-7:3),
cost = 2^(-3:5)),
tunecontrol = tune.control(sampling = "cross"),cross=10)
svm_neu_cons_san <- tune(method=svm, neutral_label~.,
data = neu_data_cons_san,ranges = list(gamma = 2^(-7:3),
cost = 2^(-3:5)),
tunecontrol = tune.control(sampling = "cross"),cross=10)
svm_neu_full_san
svm_neu_cfs_san
svm_neu_full_data_san<-mycv(10,neu_data_san,"neutral_label",svm, kernel="radial",
gamma= 0.25, cost=2)
svm_neu_full_perf_san<-my_performance(svm_neu_full_data_san$predicted,
svm_neu_full_data_san$neutral_label)
svm_neu_full_perf_san
strength_neu_perf_san
svm_neu_cons_san
svm_neu_cons_san <- tune(method=svm, neutral_label~.,
data = neu_data_cons_san,ranges = list(gamma = 2^(-7:3),
cost = 2^(-3:5)),
tunecontrol = tune.control(sampling = "cross"),cross=10)
svm_pol_full_san <- tune(method=svm, label~.,
data = pol_data_san,ranges = list(gamma = 2^(-7:3),
cost = 2^(-3:5)),
tunecontrol = tune.control(sampling = "cross"),cross=10)
svm_pol_cfs_san <- tune(method=svm, label~.,
data = pol_data_cfs_san,ranges = list(gamma = 2^(-7:3),
cost = 2^(-3:5)),
tunecontrol = tune.control(sampling = "cross"),cross=10)
svm_pol_cons_san <- tune(method=svm, label~.,
data = pol_data_cons_san,ranges = list(gamma = 2^(-7:3),
cost = 2^(-3:5)),
tunecontrol = tune.control(sampling = "cross"),cross=10)
svm_neu_full_ts <- tune(method=svm, neutral_label~.,
data = neu_data_ts,ranges = list(gamma = 2^(-7:3),
cost = 2^(-3:5)),
tunecontrol = tune.control(sampling = "cross"),cross=10)
svm_neu_cfs_ts <- tune(method=svm, neutral_label~.,
data = neu_data_cfs_ts,ranges = list(gamma = 2^(-7:3),
cost = 2^(-3:5)),
tunecontrol = tune.control(sampling = "cross"),cross=10)
svm_neu_cons_ts <- tune(method=svm, neutral_label~.,
data = neu_data_cons_ts,ranges = list(gamma = 2^(-7:3),
cost = 2^(-3:5)),
tunecontrol = tune.control(sampling = "cross"),cross=10)
svm_pol_full_ts <- tune(method=svm, label~.,
data = pol_data_ts,ranges = list(gamma = 2^(-7:3),
cost = 2^(-3:5)),
tunecontrol = tune.control(sampling = "cross"),cross=10)
svm_pol_cfs_ts <- tune(method=svm, label~.,
data = pol_data_cfs_ts,ranges = list(gamma = 2^(-7:3),
cost = 2^(-3:5)),
tunecontrol = tune.control(sampling = "cross"),cross=10)
svm_pol_cons_ts <- tune(method=svm, label~.,
data = pol_data_cons_ts,ranges = list(gamma = 2^(-7:3),
cost = 2^(-3:5)),
tunecontrol = tune.control(sampling = "cross"),cross=10)
save.image("~/Dropbox/thesis_exp/workspace.R")
svm_neu_cons_san
svm_pol_full_san
svm_pol_cfs_san
svm_pol_cons_san
svm_neu_full_ts
svm_neu_cfs_ts
svm_neu_cons_ts
svm_pol_full_ts
svm_pol_cfs_ts
svm_pol_cons_ts
svm_neu_cons_san
svm_neu_cons_data_san<-mycv(10,neu_data_cons_san,"neutral_label",svm, kernel="radial",
gamma= 2, cost=32)
svm_neu_cons_perf_san<-my_performance(svm_neu_cons_data_san$predicted,
svm_neu_cons_data_san$neutral_label)
2^5
svm_neu_cons_data_san<-mycv(10,neu_data_cons_san,"neutral_label",svm, kernel="radial",
gamma= 2, cost=32)
svm_neu_cons_perf_san<-my_performance(svm_neu_cons_data_san$predicted,
svm_neu_cons_data_san$neutral_label)
svm_neu_cons_perf_san
svm_neu_cfs_perf_san
svm_neu_cons_san
svm_neu_cons_san$performances
svm_neu_cfs_san
svm_neu_cfs_san$performances
svm_neu_cfs_san
svm_neu_cons_san
svm_neu_full_san
svm_neu_full_san$performances
svm_neu_full_san
svm_neu_cfs_san
svm_neu_cons_san
svm_pol_full_san
svm_neu_cfs_data_san<-mycv(10,neu_data_cfs_san,"neutral_label",svm, kernel="radial",
gamma= 0.03125, cost=4)
svm_neu_cfs_perf_san<-my_performance(svm_neu_cfs_data_san$predicted,
svm_neu_cfs_data_san$neutral_label)
svm_neu_cfs_perf_san
svm_neu_cfs_data_san<-mycv(10,neu_data_cfs_san,"neutral_label",svm, kernel="radial",
gamma= 8, cost=2)
svm_neu_cfs_perf_san<-my_performance(svm_neu_cfs_data_san$predicted,
svm_neu_cfs_data_san$neutral_label)
svm_neu_cfs_perf_san
svm_pol_full_data_san<-mycv(10,pol_data_san,"label",svm, kernel="radial",
gamma= 0.03125, cost=4)
svm_pol_full_perf_san<-my_performance(svm_pol_full_data_san$predicted,
svm_pol_full_data_san$label)
svm_pol_full_perf_san
svm_pol_full_perf_san
svm_pol_cfs_san
svm_pol_cfs_data_san<-mycv(10,pol_data_cfs_san,"label",svm, kernel="radial",
gamma=0.03125, cost=8)
svm_pol_cfs_perf_san<-my_performance(svm_pol_cfs_data_san$predicted,
svm_pol_cfs_data_san$label)
svm_pol_cfs_perf_san
svm_pol_cons_san
svm_pol_cons_data_san<-mycv(10,pol_data_cons_san,"label",svm, kernel="radial",
gamma=0.03125, cost=16)
svm_pol_cons_perf_san<-my_performance(svm_pol_cons_data_san$predicted,
svm_pol_cons_data_san$label)
svm_pol_cons_perf_san
svm_pol_cons_data_san<-mycv(10,pol_data_cons_san,"label",svm, kernel="radial",
gamma=0.03125, cost=16)
svm_pol_cons_perf_san<-my_performance(svm_pol_cons_data_san$predicted,
svm_pol_cons_data_san$label)
svm_pol_cons_perf_san
svm_pol_cfs_perf_san
names(pol_data_cfs_san)
save.image("~/Dropbox/thesis_exp/workspace.R")
svm_pol_cfs_perf_san
svm_pol_cons_perf_san
svm_pol_full_perf_san
rpart_neu_full_san <- tune.rpart(neutral_label~.,data = neu_data_san,
cp = c(0.002,0.005,0.01,0.015,0.02,0.03),
minsplit=seq(0,100,10))
rpart_neu_full_ts <- tune.rpart(neutral_label~.,data = neu_data_ts,
cp = c(0.002,0.005,0.01,0.015,0.02,0.03),
minsplit=seq(0,100,10))
rpart_neu_full_san
rpart_neu_full_data_san<-mycv(10,neu_data_san,"neutral_label",rpart,minsplit=30,cp=0.002)
rpart_neu_full_perf_san<-my_performance(rpart_neu_full_data_san$predicted,
rpart_neu_full_data_san$neutral_label)
rpart_neu_full_perf_san
rpart_neu_full_ts
rpart_neu_full_data_ts<-mycv(10,neu_data_ts,"neutral_label",rpart,minsplit=30,cp=0.002)
rpart_neu_full_perf_ts<-my_performance(rpart_neu_full_data_ts$predicted,
rpart_neu_full_data_ts$neutral_label)
rpart_neu_full_perf_ts
rpart_pol_full_san <- tune.rpart(label~.,data = pol_data_san,
cp = c(0.002,0.005,0.01,0.015,0.02,0.03),
minsplit=seq(0,100,10))
rpart_pol_full_ts <- tune.rpart(label~.,data = pol_data_ts,
cp = c(0.002,0.005,0.01,0.015,0.02,0.03),
minsplit=seq(0,100,10))
rpart_pol_full_san
rpart_pol_full_data_san<-mycv(10,pol_data_san,"label",rpart,minsplit=100,cp=0.002)
rpart_pol_full_perf_san<-my_performance(rpart_pol_full_data_san$predicted,
rpart_pol_full_data_san$label)
rpart_pol_full_perf_san<-my_performance(rpart_pol_full_data_san$predicted,
rpart_pol_full_data_san$label)
rpart_pol_full_perf_san
rpart_pol_full_ts
rpart_pol_full_data_ts<-mycv(10,pol_data_ts,"label",rpart,minsplit=10,cp=0.005)
rpart_pol_full_perf_ts<-my_performance(rpart_pol_full_data_ts$predicted,
rpart_pol_full_data_ts$label)
rpart_pol_full_perf_ts
rpart_pol_full_perf_san
j48_neu_full_perf_san
j48_pol_full_perf_san
j48_pol_full_data_san<-mycv(10,pol_data_san,"label",J48)
j48_pol_full_perf_san<-my_performance(j48_pol_full_data_san$predicted,
j48_pol_full_data_san$label)
j48_pol_full_data_ts<-mycv(10,pol_data_ts,"label",J48)
j48_pol_full_perf_ts<-my_performance(j48_pol_full_data_ts$predicted,
j48_pol_full_data_ts$label)
j48_pol_full_perf_san
j48_pol_full_perf_ts
log_neu_full_perf_san
log_neu_cons_perf_san
log_neu_cfs_perf_san
log_neu_full_perf_ts
log_neu_cfs_perf_ts
log_pol_full_perf_san
log_pol_cons_perf_san
log_pol_cfs_perf_san
log_pol_full_perf_ts
log_pol_cons_perf_ts
log_pol_cfs_perf_ts
voter_pol_cfs<-data.frame(svm_pol_cfs_data_san$predicted,bay_pol_cfs_pred_san$predicted,
log_pol_cfs_data_san$predicted)
voter_cfs_perf_san<-my_performance(my_vote(voter_pol_cfs),pol_data_san$label)
voter_pol_cons<-data.frame(svm_pol_cons_data_san$predicted,bay_pol_cons_pred_san$predicted,
log_pol_cons_data_san$predicted)
voter_cons_perf_san<-my_performance(my_vote(voter_pol_cons),pol_data_san$label)
voter_cfs_perf_san
voter_pol_cons<-data.frame(svm_pol_cons_data_san$predicted,bay_pol_cons_pred_san$predicted,
log_pol_cons_data_san$predicted)
voter_cons_perf_san<-my_performance(my_vote(voter_pol_cons),pol_data_san$label)
voter_cons_perf_san
voter_cfs_perf_san
bay_pol_full_perf_san
bay_pol_cons_perf_san
bay_pol_cfs_perf_san
voter_cfs_perf_san
save.image("~/Dropbox/thesis_exp/workspace.R")
?rpart
?rpart()
?ls
plot(1)
a<-rnorm(199,100,2)
a
a<-rnorm(199,100,200)
a
a
max(a)
min(a)
a<-(a-min(a))/(max(a)-min(a))
a
min(a)
max(a)
b<-runif(100,min=-100,max=0)
b
b<-(b-min(b))(max(b)-min(b))
b<-(b-min(b))/(max(b)-min(b))
b
library("nnet")
library("rpart")
library("rpart.plot")
library("class")
library("e1071")
library("xtable")
library("RWeka")
library("FSelector")
?svm
a
a<-5
setwd("workspace/StaticTwitterSent/extra/senticNet/parser/")
datos<-read.csv("STSfinal.csv",header=T,sep="\t")
names(datos)
names(datos[,2:33])
datos<-(datos[,2:33])
datos
librry(rpart)
library(rpart)
library(rpart.plot)
arbol<-rpart(label~.,data=datos)
rpart.plot(arbol)
